// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{BIT_BOUNTY_RISC0_GUEST_ELF, BIT_BOUNTY_RISC0_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

pub fn prove() {
    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    println!("prove function is called");

    // For example:
    let input: u32 = 15 * u32::pow(2, 27);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    println!("Start proving, input={}", input);

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, BIT_BOUNTY_RISC0_GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output: u32 = receipt.journal.decode().unwrap();

    println!("Proving complete, output={}", output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(BIT_BOUNTY_RISC0_GUEST_ID).unwrap();
}
